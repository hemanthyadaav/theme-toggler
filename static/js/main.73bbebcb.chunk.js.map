{"version":3,"sources":["context/ThemeContext.js","Colors.js","components/HeroSection.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","createContext","ThemeModes","light","textColor","backgroundColor","border","dark","HeroSection","theme","useContext","currentTheme","mode","setMode","style","padding","color","textAlign","onClick","fontSize","borderRadius","App","themeHook","useState","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAIeA,G,KAFMC,wBAAc,CAAC,QAAS,gB,OCU9BC,G,MAZI,CACfC,MAAO,CACPC,UAAW,OACXC,gBAAiB,OACjBC,OAAQ,kBAEVC,KAAM,CACJH,UAAW,OACXC,gBAAiB,OACjBC,OAAQ,qB,OCJG,SAASE,IAEnB,IAAMC,EAAQC,qBAAWV,GAAc,GACjCW,EAAeT,EAAWO,GAEjC,EAAwBC,qBAAWV,GAAnC,mBAAOY,EAAP,KAAaC,EAAb,KAGA,OAEI,sBAAKC,MAAO,CACRC,QAAS,MACTV,gBAAgB,GAAD,OAAKM,EAAaN,iBACjCW,MAAM,GAAD,OAAKL,EAAaP,WACvBa,UAAW,UAJf,UAMI,iEACA,gJACA,wBACIC,QAAS,WACeL,EAAV,SAATD,EAA2B,QAAmB,SAEtDE,MAAO,CACAT,gBAAiB,UACjBW,MAAO,QACPD,QAAS,aACTI,SAAU,OACVC,aAAc,OACfd,OAAO,GAAD,OAAKK,EAAaL,SAV/B,SAWc,UAATM,EAAkB,qBAAsB,iBC7B1C,SAASS,IAEtB,IAAMC,EAAWC,mBAAS,SAE1B,OACE,cAAC,EAAaC,SAAd,CAAuBC,MAAOH,EAA9B,SACE,cAACd,EAAD,MCXN,IAYekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.73bbebcb.chunk.js","sourcesContent":["import React, { createContext } from \"react\"\r\n\r\nconst ThemeContext = createContext([\"light\", () => {}])\r\n\r\nexport default ThemeContext;","const ThemeModes = {\r\n    light: {\r\n    textColor: \"#000\",\r\n    backgroundColor: \"#FFF\",\r\n    border: \"2px solid #000\"\r\n  },\r\n  dark: {\r\n    textColor: \"#fff\",\r\n    backgroundColor: \"#333\",\r\n    border: \"2px dashed #000\"\r\n  }\r\n}\r\nexport default ThemeModes;","import React,{useContext} from 'react'\r\nimport \"../App.css\";\r\nimport ThemeContext from \"../context/ThemeContext\"\r\nimport ThemeModes from \"../Colors\"\r\n\r\nexport default function HeroSection() {\r\n\r\n     const theme = useContext(ThemeContext)[0];\r\n     const currentTheme = ThemeModes[theme]; \r\n\r\n    const [mode, setMode] = useContext(ThemeContext);\r\n   \r\n\r\n    return (\r\n     \r\n        <div style={{\r\n            padding: \"19%\",\r\n            backgroundColor: `${currentTheme.backgroundColor}`,\r\n            color: `${currentTheme.textColor}`,\r\n            textAlign: 'center' \r\n        }}>\r\n            <h1>Theme Toggler Using Context API</h1>\r\n            <p>This is a theme toggler app assignment to make the button to toggle the theme from dark to light and vice versa</p>\r\n            <button\r\n                onClick={() => {\r\n                    (mode === \"dark\") ? setMode(\"light\") : setMode(\"dark\");\r\n            }}\r\n             style={{\r\n                    backgroundColor: \"#5A20CB\",\r\n                    color: \"white\",\r\n                    padding: \"10px 150px\",\r\n                    fontSize: \"20px\",\r\n                    borderRadius: \"10px\",\r\n                   border: `${currentTheme.border}`\r\n            }}>{(mode === \"light\")?\" Turn on Dark Mode\": \"Turn Off \"  }</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState}from 'react'\nimport ThemeContext from \"./context/ThemeContext\"\nimport HeroSection from \"./components/HeroSection\"\n\n\nexport default function App() {\n\n  const themeHook= useState(\"light\");\n\n  return (\n    <ThemeContext.Provider value={themeHook}>\n      <HeroSection />\n    </ThemeContext.Provider>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}